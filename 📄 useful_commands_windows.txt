##############################################
# 🔧 CONTRACT-IT – Useful Commands (Windows)
# Utilisé par Ahmad et Ceasar – Projet Django
##############################################

--------------------------
📁 ENVIRONNEMENT VIRTUEL
--------------------------

# ✅ Créer un nouvel environnement virtuel
python -m venv env

# ✅ Activer l’environnement (PowerShell)
.\env\Scripts\Activate.ps1

# ✅ Activer l’environnement (CMD)
env\Scripts\activate.bat

# ✅ Désactiver l’environnement
deactivate

--------------------------
🚀 LANCER DJANGO
--------------------------

# ✅ Démarrer le serveur
python manage.py runserver

# ✅ Créer une nouvelle app Django (ex: messages)
python manage.py startapp messages

--------------------------
📄 FICHIERS DE TRADUCTION
--------------------------

# ✅ Marquer les chaînes traduisibles dans ton code HTML ou Python :
# Exemple : {% trans "Sign up" %}  ou  _("Log in")

# ✅ Extraire les messages traduisibles
python manage.py makemessages -l fr
python manage.py makemessages -l en

# ➕ Le fichier sera créé ici :
# locale/fr/LC_MESSAGES/django.po
# locale/en/LC_MESSAGES/django.po

# ✅ Compiler les traductions .po → .mo
python manage.py compilemessages

# ✅ Recompiler après chaque modification manuelle des .po

--------------------------
📦 INSTALLER DES LIBRAIRIES
--------------------------

# ✅ Installer un paquet (ex: Pillow)
pip install Pillow

# ✅ Sauvegarder toutes les dépendances
pip freeze > requirements.txt

# ✅ Installer les dépendances d’un autre projet
pip install -r requirements.txt

--------------------------
📁 GESTION DE FICHIERS
--------------------------

# ✅ Créer un fichier texte vide
type nul > fichier.txt

# ✅ Créer un fichier dans un dossier spécifique
type nul > doc/utils/instructions.txt

# ✅ Créer un dossier
mkdir nom_du_dossier

--------------------------
🌐 GITHUB – COMMANDES CLÉS
--------------------------

# ✅ Initialiser Git dans un projet
git init

# ✅ Ajouter un fichier à l’index
git add nom_du_fichier

# ✅ Ajouter tous les fichiers
git add .

# ✅ Créer un commit
git commit -m "Message clair ici"

# ✅ Associer ton projet local à un dépôt GitHub distant
git remote add origin https://github.com/ton-nom-utilisateur/contract-it.git

# ✅ Envoyer ton code vers GitHub (branche principale = main)
git push -u origin main

# ✅ Récupérer les dernières modifications de GitHub
git pull origin main

# ✅ Changer de branche (si tu travailles à deux sur des fonctionnalités séparées)
git checkout -b nom_de_branche

--------------------------
🔍 BONUS UTILE
--------------------------

# ✅ Afficher toutes les URL de Django connues
python manage.py show_urls

# ✅ Vérifier les migrations en attente
python manage.py makemigrations
python manage.py migrate

# ✅ Créer un superuser pour accéder à /admin
python manage.py createsuperuser

# ✅ Nettoyer tous les fichiers .pyc
python manage.py clean_pyc

--------------------------
📚 REMARQUES TRADUCTIONS
--------------------------

# 🎯 Tu peux avoir un fichier .po pour EN et FR même si ton texte original est en anglais.
# Django lit les fichiers .po comme source pour générer .mo dans chaque langue activée.

# ⚠️ Ne pas supprimer les fichiers en ou fr si tu veux gérer les deux langues dans l’interface.



STEP BY STEP GUIDE FOR GITHUB FROM CHATGPT



## 🚀 CONTEXTE

* Tu travailles en **parallèle avec Ahmad**
* Le projet est déjà en ligne sur GitHub : `https://github.com/Ceasar369/CONTRACT_IT`
* Tu veux créer une **nouvelle app Django `reviews`**
* Tu veux que **GitHub enregistre tout ton travail**, **sans conflit**, et que **Ahmad puisse voir ou reprendre ton code**

---

## ✅ ÉTAPES DE A À Z : **Créer et versionner l’app `reviews` avec GitHub**

---

### 🔁 1. **Avant tout : synchronise ton projet avec la dernière version**

```bash
git checkout main               # Reviens à la branche principale
git pull origin main           # Récupère les dernières modifications de GitHub
```

---

### 🌿 2. **Crée une nouvelle branche pour ton travail**

> 💡 Pourquoi ? Pour ne pas travailler sur `main`. Chaque fonctionnalité a sa branche.

```bash
git checkout -b ceasar-add-reviews-app
```

---

### ⚙️ 3. **Crée ton app Django**

Dans le terminal :

```bash
python manage.py startapp reviews
```

Cela va créer un nouveau dossier `reviews/` avec les fichiers `models.py`, `views.py`, etc.

---

### 🛠️ 4. **Ajoute ton app dans `settings.py`**

Dans `contractit_backend/settings.py`, ajoute `"reviews"` à `INSTALLED_APPS` :

```python
INSTALLED_APPS = [
    ...
    "reviews",  # ✅ App que Ceasar vient d'ajouter
]
```

---

### 💾 5. **Sauvegarde et versionne ton travail localement**

```bash
git add .
git commit -m "✅ Ceasar: création de l'app reviews avec ajout dans settings.py"
```

---

### ☁️ 6. **Pousse ta branche sur GitHub**

```bash
git push origin ceasar-add-reviews-app
```

> 💡 À ce moment, **Ahmad peut voir ta branche** sur GitHub, la consulter, ou t’aider.

---

### 🔀 7. **Fusionner dans `main` une fois terminé**

Quand tu as bien testé et terminé :

1. Va sur [https://github.com/Ceasar369/CONTRACT\_IT](https://github.com/Ceasar369/CONTRACT_IT)
2. Tu vas voir un bouton : **“Compare & pull request”**
3. Clique dessus → ajoute un message → **“Créer la nouvelle app reviews”**
4. Clique sur **“Merge pull request”**
5. Clique sur **“Confirm merge”**

GitHub fusionne ta branche dans `main`.

---

### 📥 8. **Ahmad met à jour sa copie**

Quand il commence sa journée, il fait :

```bash
git checkout main
git pull origin main
```

Il aura **ta nouvelle app `reviews` à jour** dans son projet.

---

## ✅ Résumé visuel (à coller sur ton mur si tu veux 😄)

| Étape               | Commande                                         |
| ------------------- | ------------------------------------------------ |
| Se placer à jour    | `git checkout main` + `git pull origin main`     |
| Créer une branche   | `git checkout -b ceasar-add-reviews-app`         |
| Créer l'app Django  | `python manage.py startapp reviews`              |
| Ajouter et commit   | `git add .` + `git commit -m "Création reviews"` |
| Envoyer la branche  | `git push origin ceasar-add-reviews-app`         |
| Fusionner dans main | Créer une Pull Request depuis GitHub             |
| Pour Ahmad          | `git pull origin main`                           |

---

Si tu veux, je peux :

* Générer un fichier `.gitignore` (très important pour ne pas envoyer des fichiers inutiles comme `__pycache__`)
* Te créer un README.md propre
* Créer un petit PDF de résumé visuel pour toi et Ahmad

Souhaites-tu l’un de ces trois ?
