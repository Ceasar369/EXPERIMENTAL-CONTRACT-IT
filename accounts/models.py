# üìÅ Fichier : accounts/models.py
# üß† Ce fichier d√©finit les mod√®les de donn√©es utilis√©s pour repr√©senter les utilisateurs sur la plateforme CONTRACT-IT.
# Il contient :
#   - le mod√®le `CustomUser`, qui remplace le mod√®le utilisateur standard de Django,
#   - ‚ö†Ô∏è les mod√®les `ExternalPortfolioItem` et `InternalPortfolioItem` sont annonc√©s mais pas encore d√©finis.

from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager  # ‚öôÔ∏è Authentification personnalis√©e
from django.db import models                                # üì¶ D√©finition des champs de mod√®le
from django.utils.translation import gettext_lazy as _      # üåê Pour la traduction des textes (fran√ßais/anglais)

# ---------------------------------------------------------------------
# üåç Choix de langues possibles pour l‚Äôinterface utilisateur
# ---------------------------------------------------------------------
LANGUAGE_CHOICES = (
    ('fr', _("Fran√ßais")),
    ('en', _("Anglais")),
)

# ---------------------------------------------------------------------
# ‚öôÔ∏è CustomUserManager : gestionnaire pour CustomUser sans champ username
# ---------------------------------------------------------------------
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        """Cr√©e un utilisateur standard √† partir d'un email uniquement."""
        if not email:
            raise ValueError("L‚Äôadresse courriel doit √™tre fournie.")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)  # üîê Hachage du mot de passe
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        """Cr√©e un superutilisateur avec tous les droits d'administration."""
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)
        return self.create_user(email, password, **extra_fields)

# ---------------------------------------------------------------------
# üë§ Mod√®le principal : CustomUser
# Authentification par email, gestion multir√¥le (client + entrepreneur), 
# informations adapt√©es √† chaque r√¥le CONTRACT-IT.
# ---------------------------------------------------------------------
class CustomUser(AbstractBaseUser, PermissionsMixin):
    """
    Mod√®le principal des utilisateurs CONTRACT-IT :
    - Remplace le mod√®le User par d√©faut
    - Supprime le champ `username` ‚Üí l'email devient l‚Äôidentifiant
    - G√®re deux r√¥les : client et/ou entrepreneur
    - Supporte des champs sp√©cifiques (portfolio, disponibilit√©, etc.)
    """

    # üì® Identifiant principal
    email = models.EmailField(unique=True, help_text="Adresse courriel utilis√©e pour se connecter √† la plateforme. Obligatoire.")

    # üßç Informations g√©n√©rales
    first_name = models.CharField(max_length=150, blank=True, help_text="Pr√©nom de l'utilisateur. Optionnel.")
    last_name = models.CharField(max_length=150, blank=True, help_text="Nom de famille de l'utilisateur. Optionnel.")
    phone = models.CharField(max_length=15, blank=True, help_text="Num√©ro de t√©l√©phone. Optionnel.")
    city = models.CharField(max_length=100, help_text="Ville de r√©sidence de l'utilisateur. Obligatoire.")
    language = models.CharField(max_length=10, choices=LANGUAGE_CHOICES, default='fr', help_text="Langue de l'interface utilisateur.")

    profile_picture = models.ImageField(
        upload_to='profiles/',
        blank=True,
        null=True,
        default='core/images/default-avatar.jpg',
        help_text="Photo de profil affich√©e publiquement. Optionnel."
    )
    bio = models.TextField(blank=True, help_text="Courte biographie affich√©e publiquement. Optionnel.")
    company_name = models.CharField(max_length=255, blank=True, help_text="Nom d'entreprise ou identit√© professionnelle. Optionnel.")
    is_verified = models.BooleanField(default=False, help_text="Statut de v√©rification valid√© manuellement par l'√©quipe. Optionnel.")
    date_joined = models.DateTimeField(auto_now_add=True, help_text="Date d'inscription de l'utilisateur. G√©n√©r√©e automatiquement.")

    # üè∑Ô∏è R√¥les utilisateurs
    is_client = models.BooleanField(default=False, help_text="L'utilisateur peut publier des projets (client).")
    is_contractor = models.BooleanField(default=False, help_text="L'utilisateur peut proposer ses services (entrepreneur).")

    # üîß Sp√©cificit√©s entrepreneur
    specialties = models.CharField(max_length=255, blank=True, help_text="Sp√©cialit√©s : plomberie, √©lectricit√©, toiture, etc.")
    hourly_rate = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True, help_text="Tarif horaire propos√©. Optionnel.")
    availability = models.CharField(max_length=100, blank=True, help_text="Disponibilit√© actuelle (ex. : Disponible en juin).")
    certifications = models.TextField(blank=True, help_text="Certifications d√©tenues (RBQ, ASP, etc.).")

    # üìä Statistiques client
    project_history_count = models.PositiveIntegerField(default=0, help_text="Nombre total de projets publi√©s.")

    # üîê Champs requis pour le fonctionnement du syst√®me
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['language']
    objects = CustomUserManager()

    is_active = models.BooleanField(default=True, help_text="Statut actif du compte.")
    is_staff = models.BooleanField(default=False, help_text="Autorisation d'acc√®s √† l‚Äôinterface d‚Äôadministration.")

    def __str__(self):
        """
        Affichage dans l'interface admin : pr√©nom + nom ou email si vide.
        """
        if self.first_name or self.last_name:
            return f"{self.first_name} {self.last_name}".strip()
        return self.email

    def get_display_name(self):
        """
        Nom affich√© publiquement (dans les profils, messages, etc.).
        """
        if self.first_name or self.last_name:
            return f"{self.first_name} {self.last_name}".strip()
        return self.email

    def is_profile_complete(self):
        """
        V√©rifie si le profil contient les informations de base.
        Utile pour alerter ou bloquer certaines actions (soumission, r√©ponse √† projet‚Ä¶).
        """
        return all([
            self.first_name,
            self.last_name,
            self.city,
            self.profile_picture,
            self.is_verified
        ])
