# accounts/models.py

from django.contrib.auth.models import AbstractUser
from django.db import models
from django.conf import settings
from django.forms import ValidationError
from django.utils.translation import gettext_lazy as _

LANGUAGE_CHOICES = (
    ('fr', _("Fran√ßais")),
    ('en', _("Anglais")),
)

# ------------------------------------------------------------------------------
# üë§ Mod√®le utilisateur personnalis√© utilis√© pour tous les utilisateurs CONTRACT-IT
# H√©rite de AbstractUser pour b√©n√©ficier du syst√®me d‚Äôauthentification Django
# ------------------------------------------------------------------------------
class CustomUser(AbstractUser):
    # üéØ Champs communs pour tous les types d‚Äôutilisateurs (clients et entrepreneurs)
    email = models.EmailField(unique=True, help_text="Adresse courriel pour se connecter et recevoir les notifications")
    phone = models.CharField(max_length=15, blank=True, help_text="Num√©ro de t√©l√©phone de l'utilisateur")
    profile_picture = models.ImageField(upload_to='profiles/', blank=True, null=True, help_text="Photo de profil affich√©e publiquement")
    bio = models.TextField(blank=True, help_text="Br√®ve biographie affich√©e sur le profil")
    city = models.CharField(max_length=100, blank=True, help_text="Ville de r√©sidence de l'utilisateur")
    language = models.CharField(max_length=10, choices=LANGUAGE_CHOICES, default='fr', help_text=_("Langue d'affichage de l'interface"))
    is_verified = models.BooleanField(default=False, help_text="Indique si l'utilisateur est v√©rifi√© par l'√©quipe admin")
    date_joined = models.DateTimeField(auto_now_add=True, help_text="Date d'inscription sur la plateforme")
    company_name = models.CharField(max_length=255, blank=True, help_text="Nom de l'entreprise") # ‚ÑπÔ∏è Le champ "company_name" est utile pour afficher une identit√© professionnelle m√™me pour des travailleurs autonomes.


    # ‚úÖ Champs de r√¥le (au moins un sera True selon le type d‚Äôutilisateur)
    is_client = models.BooleanField(default=False, help_text="D√©finit si l'utilisateur est un client")
    is_contractor = models.BooleanField(default=False, help_text="D√©finit si l'utilisateur est un entrepreneur")

    # üë∑‚Äç‚ôÇÔ∏è Champs sp√©cifiques aux entrepreneurs (affich√©s sur leur profil public)
    specialties = models.CharField(max_length=255, blank=True, help_text="Domaines de sp√©cialit√© : ex. Plomberie, √âlectricit√©")
    hourly_rate = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True, help_text="Tarif horaire affich√© publiquement")
    availability = models.CharField(max_length=100, blank=True, help_text="Disponibilit√© g√©n√©rale : ex. Disponible d√®s juin")
    certifications = models.TextField(blank=True, help_text="Certifications professionnelles (ex. RBQ, ASP, etc.)")

    # üë§ Champs sp√©cifiques aux clients (non obligatoires mais utiles pour enrichir leur profil)
    project_history_count = models.PositiveIntegerField(default=0, help_text="Nombre total de projets publi√©s par le client")

    # üîÅ Affichage dans l‚Äôadmin ou debug
    def __str__(self):
        return self.username


# ------------------------------------------------------------------------------
# üìÅ Mod√®le PortfolioItem : repr√©sente une r√©alisation d‚Äôun utilisateur (surtout entrepreneur)
# Peut √™tre li√©e √† un projet r√©alis√© sur CONTRACT-IT, ou √™tre une r√©alisation externe
# ------------------------------------------------------------------------------



# -------------------------------------------------------------------------------
# üìÅ Projet EXTERNE ‚Äì Portfolio manuel ajout√© par l'entrepreneur
# -------------------------------------------------------------------------------
class ExternalPortfolioItem(models.Model):
      #  Lien avec l'utilisateur qui publie cette r√©alisation (g√©n√©ralement un entrepreneur)
    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        related_name='external_portfolio_items',
        help_text="Utilisateur ayant r√©alis√© ce projet externe"
    )

        #  Titre et description du projet

    title = models.CharField(max_length=100, help_text="Titre du projet externe")

    description = models.TextField(blank=True, help_text="Description du projet")
        #  Image illustrative du projet (facultative)
    image = models.ImageField(upload_to='portfolio/external/', blank=True, null=True)

     #  Date de publication du portfolio sur CONTRACT-IT (non li√©e √† la date de r√©alisation r√©elle)
    created_at = models.DateTimeField(auto_now_add=True, help_text="Date d'ajout dans le portfolio")

    def __str__(self):
        return f"[EXTERNE] {self.title} - {self.user.username}"



# -------------------------------------------------------------------------------
# üìÅ Projet INTERNE ‚Äì R√©alis√© via CONTRACT-IT, reli√© √† un vrai mod√®le Project
# Ce mod√®le repr√©sente une r√©alisation li√©e √† un projet effectu√© sur la plateforme.
# Chaque r√©alisation correspond √† UN SEUL projet (relation OneToOne).
# -------------------------------------------------------------------------------
class InternalPortfolioItem(models.Model):

    # üë§ Utilisateur (entrepreneur) qui a r√©alis√© ce projet
    user = models.ForeignKey(
        CustomUser,  # Mod√®le utilisateur personnalis√© (souvent is_contractor = True)
        on_delete=models.CASCADE,  # Si l'utilisateur est supprim√©, on supprime aussi son portfolio
        related_name='internal_portfolio_items',  # Permet d‚Äôacc√©der aux items via user.internal_portfolio_items.all()
        help_text="Utilisateur ayant r√©alis√© ce projet CONTRACT-IT"
    )

    # üîó Projet CONTRACT-IT associ√© √† cette r√©alisation (relation 1:1)
    project = models.OneToOneField(
        'projects.Project',  # R√©f√©rence diff√©r√©e pour √©viter les imports circulaires
        on_delete=models.CASCADE,  # Si le projet est supprim√©, le portfolio l'est aussi
        related_name='internal_portfolio_item',  # Permet d‚Äôacc√©der √† l‚Äôitem via project.internal_portfolio_item
        help_text="Projet r√©alis√© via CONTRACT-IT (doit exister dans la plateforme)"
    )

    # üìù Notes compl√©mentaires laiss√©es par l‚Äôentrepreneur (r√©sultats, r√©sum√©, commentaires)
    notes = models.TextField(
        blank=True,  # facultatif
        help_text="Commentaires ou r√©sultats du projet"
    )

    # üïí Date d‚Äôajout de cette r√©alisation au portfolio interne
    created_at = models.DateTimeField(
        auto_now_add=True  # prend la date au moment de la cr√©ation
    )

    # ‚úÖ Validation logique personnalis√©e : v√©rifie que l'entrepreneur est bien le contractor du projet li√©
    def clean(self):
        if self.project.contractor != self.user:
            raise ValidationError("Ce projet n'a pas √©t√© r√©alis√© par cet utilisateur.")  # emp√™che les erreurs de liaison

    # üîÅ Affichage lisible dans l‚Äôinterface admin ou dans les logs
    def __str__(self):
        return f"[CONTRACT-IT] {self.project.title} - {self.user.username}"
