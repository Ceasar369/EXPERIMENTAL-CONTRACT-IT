# üìÅ Fichier : accounts/models.py
# üß† Ce fichier d√©finit les mod√®les de donn√©es utilis√©s pour repr√©senter les utilisateurs sur la plateforme CONTRACT-IT.
# Plus pr√©cis√©ment, il contient :
#   - le mod√®le `CustomUser`, qui remplace le mod√®le utilisateur standard de Django,
#   - un mod√®le `ExternalPortfolioItem` pour les projets r√©alis√©s en dehors de la plateforme,
#   - un mod√®le `InternalPortfolioItem` pour les projets r√©alis√©s via CONTRACT-IT et li√©s √† un projet publi√©.

# üîÅ Import des modules de base pour les mod√®les Django
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager  # ‚öôÔ∏è Authentification personnalis√©e
from django.db import models                              # üì¶ Outils pour d√©finir des champs (CharField, BooleanField, etc.)
from django.forms import ValidationError                  # ‚ö†Ô∏è Utilis√© pour ajouter une r√®gle de validation personnalis√©e
from django.utils.translation import gettext_lazy as _    # üåê Pour rendre les textes traduisibles (multi-langues)

# ---------------------------------------------------------------------
# üåç Choix de langues possibles pour l‚Äôinterface utilisateur
# On utilise une liste de tuples, chaque tuple = (valeur en base de donn√©es, label affich√©)
# ---------------------------------------------------------------------
LANGUAGE_CHOICES = (
    ('fr', _("Fran√ßais")),  # Choix 1 : Fran√ßais
    ('en', _("Anglais")),   # Choix 2 : Anglais
)

# ---------------------------------------------------------------------
# ‚öôÔ∏è CustomUserManager : gestionnaire d'utilisateurs sans username
# Utilis√© pour cr√©er des utilisateurs avec uniquement l'email comme identifiant.
# ---------------------------------------------------------------------
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        """Cr√©e un utilisateur standard √† partir d'un email uniquement."""
        if not email:
            raise ValueError("L‚Äôadresse courriel doit √™tre fournie.")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)  # üîê Hachage du mot de passe
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        """Cr√©e un superutilisateur avec tous les droits d'administration."""
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)
        return self.create_user(email, password, **extra_fields)

# ---------------------------------------------------------------------
# üë§ Mod√®le principal : CustomUser
# Il remplace le mod√®le User de Django en y ajoutant des champs adapt√©s √† CONTRACT-IT.
# Chaque utilisateur peut √™tre un client, un entrepreneur, ou les deux.
# ---------------------------------------------------------------------
class CustomUser(AbstractBaseUser, PermissionsMixin):
    """
    Ce mod√®le h√©rite de AbstractBaseUser (au lieu de AbstractUser), ce qui :
    - supprime totalement le champ `username`
    - nous oblige √† g√©rer les permissions avec PermissionsMixin
    - permet d'utiliser l'email comme identifiant principal

    ‚û§ Il supprime le champ `username`
    ‚û§ Utilise `email` comme identifiant de connexion
    ‚û§ Contient des champs suppl√©mentaires pour les r√¥les CONTRACT-IT
    """

    # ‚úÖ On utilise l‚Äôemail comme champ de connexion
    email = models.EmailField(unique=True, help_text="Adresse courriel utilis√©e pour se connecter √† la plateforme.")

    # ‚úÖ Champs de nom √† ajouter explicitement, car on a supprim√© `username`
    first_name = models.CharField(max_length=150, blank=True, help_text="Pr√©nom de l'utilisateur (optionnel).")
    last_name = models.CharField(max_length=150, blank=True, help_text="Nom de famille de l'utilisateur (optionnel).")


    # ----------------------------- Champs communs -----------------------------
    phone = models.CharField(max_length=15, blank=True, help_text="Num√©ro de t√©l√©phone de l'utilisateur.")
    profile_picture = models.ImageField(
        upload_to='profiles/',
        blank=True,
        null=True,
        default='core/images/default-avatar.jpg',  # üìå Chemin relatif dans static/
        help_text="Photo de profil affich√©e dans le profil public."
    )
    bio = models.TextField(blank=True, help_text="Courte biographie affich√©e dans le profil public.")
    city = models.CharField(max_length=100, help_text="Ville de r√©sidence de l'utilisateur.")
    language = models.CharField(max_length=10, choices=LANGUAGE_CHOICES, default='fr', help_text="Langue de l'interface utilisateur (fran√ßais ou anglais).")
    is_verified = models.BooleanField(default=False, help_text="Statut de v√©rification manuel par l'√©quipe CONTRACT-IT.")
    date_joined = models.DateTimeField(auto_now_add=True, help_text="Date d'inscription de l'utilisateur.")
    company_name = models.CharField(max_length=255, blank=True, help_text="Nom de l'entreprise ou identit√© professionnelle (optionnel).")

    # ----------------------------- Champs de r√¥le -----------------------------
    is_client = models.BooleanField(default=False, help_text="D√©finit si l'utilisateur peut publier des projets (client).")
    is_contractor = models.BooleanField(default=False, help_text="D√©finit si l'utilisateur peut proposer ses services (entrepreneur).")

    # ---------------------- Champs sp√©cifiques aux entrepreneurs ----------------------
    specialties = models.CharField(max_length=255, blank=True, help_text="Sp√©cialit√©s professionnelles : plomberie, √©lectricit√©, toiture, etc.")
    hourly_rate = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True, help_text="Tarif horaire propos√© par l'entrepreneur (optionnel).")
    availability = models.CharField(max_length=100, blank=True, help_text="Disponibilit√© actuelle (ex. : Disponible en juin).")
    certifications = models.TextField(blank=True, help_text="Certifications d√©tenues (ex. RBQ, ASP, etc.).")

    # ---------------------- Champs sp√©cifiques aux clients ----------------------
    project_history_count = models.PositiveIntegerField(default=0, help_text="Nombre total de projets publi√©s par ce client.")

    # ‚úÖ Obligatoire pour AbstractBaseUser ‚Üí on indique le champ qui sert d‚Äôidentifiant
    USERNAME_FIELD = 'email'
    # ‚úÖ Champs requis uniquement pour les superutilisateurs (ex. : via createsuperuser)
    REQUIRED_FIELDS = ['language']

    # ‚úÖ Manager personnalis√©
    objects = CustomUserManager()

    # ‚úÖ Obligatoire pour que Django reconnaisse ce mod√®le comme utilisateur
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    def __str__(self):
        """
        Affichage dans l'admin : pr√©nom + nom si disponibles, sinon email.
        """
        if self.first_name or self.last_name:
            return f"{self.first_name} {self.last_name}".strip()
        return self.email

    def get_display_name(self):
        """
        Nom complet √† afficher publiquement sur la plateforme (ex : profil public).
        Peut √™tre modifi√© plus tard pour int√©grer un nom d‚Äôusage ou un slug.
        """
        if self.first_name or self.last_name:
            return f"{self.first_name} {self.last_name}".strip()
        return self.email


